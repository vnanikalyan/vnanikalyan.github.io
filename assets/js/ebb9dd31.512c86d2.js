"use strict";(self.webpackChunkvnanikalyan_github_io=self.webpackChunkvnanikalyan_github_io||[]).push([[7533],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),i=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=i(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=i(t),m=o,g=d["".concat(c,".").concat(m)]||d[m]||p[m]||s;return t?r.createElement(g,a(a({ref:n},u),{},{components:t})):r.createElement(g,a({ref:n},u))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,a=new Array(s);a[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[d]="string"==typeof e?e:o,a[1]=l;for(var i=2;i<s;i++)a[i]=t[i];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7522:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>i});var r=t(7462),o=(t(7294),t(3905));const s={slug:"node-oracle-db",id:"node-oracle-db",title:"Node Oracle DB",authors:["vnk"],tags:["NodeJs","Oracle","Database","Javascript"],custom_edit_url:null},a=void 0,l={unversionedId:"NodeJs/CRUD-Series/node-oracle-db",id:"NodeJs/CRUD-Series/node-oracle-db",title:"Node Oracle DB",description:"Step 1:",source:"@site/docs/NodeJs/CRUD-Series/node-oracle-db.md",sourceDirName:"NodeJs/CRUD-Series",slug:"/NodeJs/CRUD-Series/node-oracle-db",permalink:"/docs/NodeJs/CRUD-Series/node-oracle-db",draft:!1,editUrl:null,tags:[{label:"NodeJs",permalink:"/docs/tags/node-js"},{label:"Oracle",permalink:"/docs/tags/oracle"},{label:"Database",permalink:"/docs/tags/database"},{label:"Javascript",permalink:"/docs/tags/javascript"}],version:"current",frontMatter:{slug:"node-oracle-db",id:"node-oracle-db",title:"Node Oracle DB",authors:["vnk"],tags:["NodeJs","Oracle","Database","Javascript"],custom_edit_url:null},sidebar:"mySidebar",previous:{title:"Node MySql DB",permalink:"/docs/NodeJs/CRUD-Series/node-mysql-db"}},c={},i=[{value:"Step 1:",id:"step-1",level:5},{value:"Step 2:",id:"step-2",level:4},{value:"Sample CrudOperations Class",id:"sample-crudoperations-class",level:3},{value:"Retrieve",id:"retrieve",level:3},{value:"Insert a Single row",id:"insert-a-single-row",level:3},{value:"update",id:"update",level:3},{value:"Delete",id:"delete",level:3},{value:"Insert (Outbinds)",id:"insert-outbinds",level:3},{value:"Insert Many",id:"insert-many",level:3},{value:"Update Many",id:"update-many",level:3}],u={toc:i};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h5",{id:"step-1"},"Step 1:"),(0,o.kt)("p",null,"Install OracleDB Package"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm i oracledb\n")),(0,o.kt)("h4",{id:"step-2"},"Step 2:"),(0,o.kt)("p",null,"A basic oracle client should be installed on your machine.",(0,o.kt)("br",{parentName:"p"}),"\n","Download it from here ",(0,o.kt)("a",{parentName:"p",href:"https://www.oracle.com/uk/database/technologies/instant-client/downloads.html"},"Oracle Client")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"For Windows Machine")," - Place the extracted files in the following path of nodejs code   "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"> node_modules/oracledb/build/Release/  \n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"For Linux Machine")," - Place the extracted files in the lib folder in root path"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"> /lib  \n")),(0,o.kt)("h3",{id:"sample-crudoperations-class"},"Sample CrudOperations Class"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"//The CRUD operations on a dummy user table\nconst oracledb = require('oracledb')\n\nclass CrudOperations {\n    constructor() {\n        this.connectionString = process.env.CONNECTION_STRING\n        this.username = process.env.USER_NAME\n        this.password = process.env.PASSWORD\n        this.options = { outFormat: oracledb.OBJECT }\n    }\n    \n    select(user) {}\n    insert(user) {}\n    update(user) {}\n    deleteOperation(user) {}\n}\n")),(0,o.kt)("h3",{id:"retrieve"},"Retrieve"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const oracledb = require('oracledb')\n\nasync select(user) {\n    const connection = await oracledb.getConnection({\n      user: this.username,\n      password: this.password,\n      connectString: this.connectionString\n    })\n    const getSqlQuery = `SELECT * FROM dummyusertable \n                         WHERE email = '${user.email}'`\n    try {\n      console.log(getSqlQuery)\n      const result = await connection.execute(getSqlQuery, {}, this.options)      \n      return result.rows\n    } catch (error) {\n      console.log(error)\n      throw new Error(error)\n    } finally {\n       try {\n        if(connection) {\n          await connection.close()\n        }\n       } catch(err) {\n          console.log(err.message)\n       }\n    }\n}\n")),(0,o.kt)("h3",{id:"insert-a-single-row"},"Insert a Single row"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const oracledb = require('oracledb')\n\nasync insert(user) {\n    const connection = await oracledb.getConnection({\n      user: this.username,\n      password: this.password,\n      connectString: this.connectionString\n    })\n    const opts = this.options\n    opts.autoCommit = true  \n    const binds = {}\n    \n    const insertSqlQuery = `INSERT INTO dummyusertable(\n                                  FIRST_NAME,\n                                  LAST_NAME,\n                                  EMAIL,\n                                  MODIFIED_TIMESTAMP\n                                ) \n                                VALUES(\n                                  '${user.first_name}',\n                                  '${user.last_name}',\n                                  '${user.email}',                                  \n                                  SYSDATE                                  \n                                )`\n    try {\n      console.log(insertSqlQuery)\n      const result = await connection.execute(insertSqlQuery, binds, opts)     \n      if (result.rowsAffected === 1) {\n        return `${user.email} creation successfull!`\n      } else {\n        throw new Error('Unable to create user!')\n      }\n    } catch (error) {\n      console.log(error)\n      throw new Error(error)\n    } finally {\n       try {\n        if(connection) {\n          await connection.close()\n        }\n       } catch(err) {\n          console.log(err.message)\n       }\n    }\n}\n")),(0,o.kt)("h3",{id:"update"},"update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const oracledb = require('oracledb')\n\nasync update(user) {\n    const connection = await oracledb.getConnection({\n      user: this.username,\n      password: this.password,\n      connectString: this.connectionString\n    })\n    const opts = this.options\n    opts.autoCommit = true\n\n    const updateSqlQuery = `UPDATE dummyusertable SET first_name = 'asdf'\n                            WHERE email = '${user.email}'`\n    try {\n      console.log(updateSqlQuery)\n      const result = await connection.execute(updateSqlQuery, {}, opts)      \n      if (result.rowsAffected === 1) {\n        return `${user.email} status is updated successfully!`\n      } else {\n        throw new Error('Unable to update the status!')\n      }\n    } catch (error) {\n      console.log(error)\n      throw new Error(error)\n    } finally {\n       try {\n        if(connection) {\n          await connection.close()\n        }\n       } catch(err) {\n          console.log(err.message)\n       }\n    }\n")),(0,o.kt)("h3",{id:"delete"},"Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const oracledb = require('oracledb')\n\nasync delete(user) {\n    const connection = await oracledb.getConnection({\n      user: this.username,\n      password: this.password,\n      connectString: this.connectionString\n    })\n    const opts = this.options\n    opts.autoCommit = true\n\n    const updateSqlQuery = 'DELETE FROM dummyusertable WHERE modified_timestamp <= TRUNC(SYSDATE) - 30'\n    try {\n      console.log(updateSqlQuery)\n      const result = await connection.execute(updateSqlQuery, {}, opts)      \n      return result\n    } catch (error) {\n      console.log(error)\n      throw new Error(error)\n    } finally {\n       try {\n        if(connection) {\n          await connection.close()\n        }\n       } catch(err) {\n          console.log(err.message)\n       }\n    }\n  }\n}\n")),(0,o.kt)("h3",{id:"insert-outbinds"},"Insert (Outbinds)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const oracledb = require('oracledb')\n\nasync insert(user) {\n    const connection = await oracledb.getConnection({\n      user: this.username,\n      password: this.password,\n      connectString: this.connectionString\n    })\n  \n  const options = {\n    autoCommit = true   \n  }\n  \n    const binds = {\n    user_id_out: {\n\n    }\n  }\n    \n    const insertSqlQuery = `INSERT INTO dummyusertable(\n                                  FIRST_NAME,\n                                  LAST_NAME,\n                                  EMAIL,\n                                  MODIFIED_TIMESTAMP\n                                ) \n                                VALUES(\n                                  '${user.first_name}',\n                                  '${user.last_name}',\n                                  '${user.email}',                                  \n                                  SYSDATE                                  \n                                ) returning USER_ID to :user_id_out`\n    try {\n      console.log(insertSqlQuery)\n      const result = await connection.execute(insertSqlQuery, binds, options)     \n      console.log('Result - ', result)\n\n      return result.outbinds.user_id_out[0]\n    } catch (error) {\n      console.log(error)\n      throw new Error(error)\n    } finally {\n       try {\n        if(connection) {\n          await connection.close()\n        }\n       } catch(err) {\n          console.log(err.message)\n       }\n    }\n}\n")),(0,o.kt)("h3",{id:"insert-many"},"Insert Many"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const oracledb = require('oracledb')\n\nasync insert(user) {\n    const connection = await oracledb.getConnection({\n      user: this.username,\n      password: this.password,\n      connectString: this.connectionString\n    })\n  \n  const options = {\n    autoCommit: true,\n    batchError: true\n  }\n  \n    const insertBinds = []\n    \n    const insertSqlQuery = `INSERT INTO dummyusertable(\n                                  FIRST_NAME,\n                                  LAST_NAME,\n                                  EMAIL,\n                                  MODIFIED_TIMESTAMP\n                                ) \n                                VALUES(\n                                  '${user.first_name}',\n                                  '${user.last_name}',\n                                  '${user.email}',                                  \n                                  SYSDATE                                  \n                                ) returning USER_ID to :user_id_out`\n    try {\n      console.log(insertSqlQuery)\n      const result = await connection.executeMany(insertSqlQuery, insertBinds, options)\n      console.log('Result - ', result)\n\n      return result.outbinds.user_id_out[0]\n    } catch (error) {\n      console.log(error)\n      throw new Error(error)\n    } finally {\n       try {\n        if(connection) {\n          await connection.close()\n        }\n       } catch(err) {\n          console.log(err.message)\n       }\n    }\n}\n")),(0,o.kt)("h3",{id:"update-many"},"Update Many"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const oracledb = require('oracledb')\n\nasync update(user) {\n      const connection = await oracledb.getConnection({\n      user: this.username,\n      password: this.password,\n      connectString: this.connectionString\n    })\n\n    const options = {\n      autoCommit = true\n    }\n\n    const updateBinds = []\n    \n\n    const updateSqlQuery = `UPDATE dummyusertable SET first_name = 'asdf'\n                            WHERE email = '${user.email}'`\n    try {\n      console.log(updateSqlQuery)\n      const result = await connection.executeMany(updateSqlQuery, updateBinds, options)\n      \n      if (result.rowsAffected === 1) {\n        return `${user.email} status is updated successfully!`\n      } else {\n        throw new Error('Unable to update the status!')\n      }\n    } catch (error) {\n      console.log(error)\n      throw new Error(error)\n    } finally {\n       try {\n        if(connection) {\n          await connection.close()\n        }\n       } catch(err) {\n          console.log(err.message)\n       }\n    }\n")))}d.isMDXComponent=!0}}]);