"use strict";(self.webpackChunkvnanikalyan_github_io=self.webpackChunkvnanikalyan_github_io||[]).push([[6413],{5680:(e,n,r)=>{r.d(n,{xA:()=>u,yg:()=>g});var t=r(6540);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=t.createContext({}),c=function(e){var n=t.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},u=function(e){var n=c(e.components);return t.createElement(i.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=o,g=d["".concat(i,".").concat(m)]||d[m]||p[m]||a;return r?t.createElement(g,s(s({ref:n},u),{},{components:r})):t.createElement(g,s({ref:n},u))}));function g(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=m;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[d]="string"==typeof e?e:o,s[1]=l;for(var c=2;c<a;c++)s[c]=r[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9175:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var t=r(8168),o=(r(6540),r(5680));const a={slug:"node-oracle-db",id:"node-oracle-db",title:"Node Oracle DB",authors:["vnk"],tags:["NodeJs","Oracle","Database","Javascript"],custom_edit_url:null},s=void 0,l={unversionedId:"NodeJs/CRUD-Series/node-oracle-db",id:"NodeJs/CRUD-Series/node-oracle-db",title:"Node Oracle DB",description:"Step 1:",source:"@site/docs/NodeJs/CRUD-Series/node-oracle-db.md",sourceDirName:"NodeJs/CRUD-Series",slug:"/NodeJs/CRUD-Series/node-oracle-db",permalink:"/docs/NodeJs/CRUD-Series/node-oracle-db",draft:!1,editUrl:null,tags:[{label:"NodeJs",permalink:"/docs/tags/node-js"},{label:"Oracle",permalink:"/docs/tags/oracle"},{label:"Database",permalink:"/docs/tags/database"},{label:"Javascript",permalink:"/docs/tags/javascript"}],version:"current",frontMatter:{slug:"node-oracle-db",id:"node-oracle-db",title:"Node Oracle DB",authors:["vnk"],tags:["NodeJs","Oracle","Database","Javascript"],custom_edit_url:null},sidebar:"mySidebar",previous:{title:"Node MySql DB",permalink:"/docs/NodeJs/CRUD-Series/node-mysql-db"},next:{title:"Introduction",permalink:"/docs/NodeJs/Multi-Threading/Intro"}},i={},c=[{value:"Step 1:",id:"step-1",level:5},{value:"Step 2:",id:"step-2",level:4},{value:"Sample CrudOperations Class",id:"sample-crudoperations-class",level:3},{value:"Retrieve",id:"retrieve",level:3},{value:"Insert a Single row",id:"insert-a-single-row",level:3},{value:"update",id:"update",level:3},{value:"Delete",id:"delete",level:3},{value:"Insert Many",id:"insert-many",level:3},{value:"Insert (OutBinds)",id:"insert-outbinds",level:3},{value:"Update Many",id:"update-many",level:3}],u={toc:c},d="wrapper";function p(e){let{components:n,...r}=e;return(0,o.yg)(d,(0,t.A)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h5",{id:"step-1"},"Step 1:"),(0,o.yg)("p",null,"Install OracleDB Package"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"$ npm i oracledb\n")),(0,o.yg)("h4",{id:"step-2"},"Step 2:"),(0,o.yg)("p",null,"A basic oracle client should be installed on your machine.",(0,o.yg)("br",{parentName:"p"}),"\n","Download it from here ",(0,o.yg)("a",{parentName:"p",href:"https://www.oracle.com/uk/database/technologies/instant-client/downloads.html"},"Oracle Client")),(0,o.yg)("p",null,(0,o.yg)("em",{parentName:"p"},"For Windows Machine")," - Place the extracted files in the following path of nodejs code   "),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-diff"},"> node_modules/oracledb/build/Release/  \n")),(0,o.yg)("p",null,(0,o.yg)("em",{parentName:"p"},"For Linux Machine")," - Place the extracted files in the lib folder in root path"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-diff"},"> /lib  \n")),(0,o.yg)("h3",{id:"sample-crudoperations-class"},"Sample CrudOperations Class"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"//The CRUD operations on a dummy user table\nconst oracledb = require('oracledb')\n\nclass CrudOperations {\n    constructor() {\n        this.connectionString = process.env.CONNECTION_STRING\n        this.username = process.env.USER_NAME\n        this.password = process.env.PASSWORD\n        this.options = { outFormat: oracledb.OBJECT }\n    }\n    \n    select(user) {}\n    insert(user) {}\n    update(user) {}\n    deleteOperation(user) {}\n}\n")),(0,o.yg)("h3",{id:"retrieve"},"Retrieve"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"const oracledb = require('oracledb')\n\nasync select(user) {\n    const connection = await oracledb.getConnection({\n      user: this.username,\n      password: this.password,\n      connectString: this.connectionString\n    })\n    const getSqlQuery = `SELECT * FROM dummyusertable \n                         WHERE email = '${user.email}'`\n    try {\n      console.log(getSqlQuery)\n      const result = await connection.execute(getSqlQuery, {}, this.options)      \n      return result.rows\n    } catch (error) {\n      console.log(error)\n      throw new Error(error)\n    } finally {\n       try {\n        if(connection) {\n          await connection.close()\n        }\n       } catch(err) {\n          console.log(err.message)\n       }\n    }\n}\n")),(0,o.yg)("h3",{id:"insert-a-single-row"},"Insert a Single row"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"const oracledb = require('oracledb')\n\nasync insert(user) {\n    const connection = await oracledb.getConnection({\n      user: this.username,\n      password: this.password,\n      connectString: this.connectionString\n    })\n    const opts = this.options\n    opts.autoCommit = true  \n    const binds = {}\n    \n    const insertSqlQuery = `INSERT INTO dummyusertable(\n                                  FIRST_NAME,\n                                  LAST_NAME,\n                                  EMAIL,\n                                  MODIFIED_TIMESTAMP\n                                ) \n                                VALUES(\n                                  '${user.first_name}',\n                                  '${user.last_name}',\n                                  '${user.email}',                                  \n                                  SYSDATE                                  \n                                )`\n    try {\n      console.log(insertSqlQuery)\n      const result = await connection.execute(insertSqlQuery, binds, opts)     \n      if (result.rowsAffected === 1) {\n        return `${user.email} creation successfull!`\n      } else {\n        throw new Error('Unable to create user!')\n      }\n    } catch (error) {\n      console.log(error)\n      throw new Error(error)\n    } finally {\n       try {\n        if(connection) {\n          await connection.close()\n        }\n       } catch(err) {\n          console.log(err.message)\n       }\n    }\n}\n")),(0,o.yg)("h3",{id:"update"},"update"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"const oracledb = require('oracledb')\n\nasync update(user) {\n    const connection = await oracledb.getConnection({\n      user: this.username,\n      password: this.password,\n      connectString: this.connectionString\n    })\n    const opts = this.options\n    opts.autoCommit = true\n\n    const updateSqlQuery = `UPDATE dummyusertable SET first_name = 'asdf'\n                            WHERE email = '${user.email}'`\n    try {\n      console.log(updateSqlQuery)\n      const result = await connection.execute(updateSqlQuery, {}, opts)      \n      if (result.rowsAffected === 1) {\n        return `${user.email} status is updated successfully!`\n      } else {\n        throw new Error('Unable to update the status!')\n      }\n    } catch (error) {\n      console.log(error)\n      throw new Error(error)\n    } finally {\n       try {\n        if(connection) {\n          await connection.close()\n        }\n       } catch(err) {\n          console.log(err.message)\n       }\n    }\n")),(0,o.yg)("h3",{id:"delete"},"Delete"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"const oracledb = require('oracledb')\n\nasync delete(user) {\n    const connection = await oracledb.getConnection({\n      user: this.username,\n      password: this.password,\n      connectString: this.connectionString\n    })\n    const opts = this.options\n    opts.autoCommit = true\n\n    const updateSqlQuery = 'DELETE FROM dummyusertable WHERE modified_timestamp <= TRUNC(SYSDATE) - 30'\n    try {\n      console.log(updateSqlQuery)\n      const result = await connection.execute(updateSqlQuery, {}, opts)      \n      return result\n    } catch (error) {\n      console.log(error)\n      throw new Error(error)\n    } finally {\n       try {\n        if(connection) {\n          await connection.close()\n        }\n       } catch(err) {\n          console.log(err.message)\n       }\n    }\n  }\n}\n")),(0,o.yg)("h3",{id:"insert-many"},"Insert Many"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"const oracledb = require('oracledb')\n\nasync insert(users) {\n    const connection = await oracledb.getConnection({\n      user: this.username,\n      password: this.password,\n      connectString: this.connectionString\n    })\n\n  const insertbinds = []\n  //Here we are trying to insert multiple users with one insert statement\n  for(const i of users) {\n    insertBinds.push({\n      firstName: i.firstName,\n      lastName: i.lastName,\n      email: i.email\n    })\n  }\n  \n  const insertOptions = {\n    autoCommit = true,\n    batchErrors: true,\n    outFormat: oracledb.OUT_FORMAT_OBJECT,\n    binddefs: {\n      firstName: {type: oracledb.STRING, maxSize: 30}, // {type: oracledb.NUMBER}\n      lastName: {type: oracledb.STRING, maxSize: 30},\n      email: {type: oracledb.STRING, maxSize: 30}\n    }    \n  }\n    \n    const insertSqlQuery = `INSERT INTO dummyusertable(\n                                  FIRST_NAME,\n                                  LAST_NAME,\n                                  EMAIL,\n                                                  MODIFIED_TIMESTAMP\n                                ) \n                                VALUES(\n                                  :firstName,\n                                  :lastName,\n                                  :email,\n                                  SYSDATE                                  \n                                )`\n    try {\n      console.log(insertSqlQuery)\n      const result = await connection.executeMany(insertSqlQuery, binds, options)\n      console.log('Result - ', result)\n\n      return result.rows\n    } catch (error) {\n      console.log(error)\n      throw new Error(error)\n    } finally {\n       try {\n        if(connection) {\n          await connection.close()\n        }\n       } catch(err) {\n          console.log(err.message)\n       }\n    }\n}\n")),(0,o.yg)("h3",{id:"insert-outbinds"},"Insert (OutBinds)"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"const oracledb = require('oracledb')\n\nasync insert(user) {\n    const connection = await oracledb.getConnection({\n      user: this.username,\n      password: this.password,\n      connectString: this.connectionString\n    })\n  \n  const binds = { // we can get the userId upon insertion of the data\n    user_id_out: {\n      type: oracledb.NUMBER,\n      dir: oracledb.BIND_OUT\n    }\n  }\n  \n    const options = { autoCommit: true }\n    \n    const insertSqlQuery = `INSERT INTO dummyusertable(\n                                  FIRST_NAME,\n                                  LAST_NAME,\n                                  EMAIL,\n                                  MODIFIED_TIMESTAMP\n                                ) \n                                VALUES(\n                                  '${user.first_name}',\n                                  '${user.last_name}',\n                                  '${user.email}',                                  \n                                  SYSDATE                                  \n                                ) returning USER_ID into :user_id_out`\n    try {\n      console.log(insertSqlQuery)\n      const result = await connection.execute(insertSqlQuery, insertBinds, options)\n      console.log('Result - ', result)\n\n      return result.outbinds.user_id_out[0]\n    } catch (error) {\n      console.log(error)\n      throw new Error(error)\n    } finally {\n       try {\n        if(connection) {\n          await connection.close()\n        }\n       } catch(err) {\n          console.log(err.message)\n       }\n    }\n}\n")),(0,o.yg)("h3",{id:"update-many"},"Update Many"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"const oracledb = require('oracledb')\n\nasync update(user) {\n      const connection = await oracledb.getConnection({\n      user: this.username,\n      password: this.password,\n      connectString: this.connectionString\n    })\n\n    const updateBinds = []\n    //Here we are trying to update multiple users with one update statement\n    for(const i of users) {\n      updateBinds.push({\n        firstName: i.firstName,        \n        email: i.email\n      })\n    }\n    \n    const updateOptions = {\n      autoCommit = true,\n      batchErrors: true,\n      outFormat: oracledb.OUT_FORMAT_OBJECT,\n      binddefs: {\n        firstName: {type: oracledb.STRING, maxSize: 30}, // {type: oracledb.NUMBER}        \n        email: {type: oracledb.STRING, maxSize: 30}\n      }    \n    }\n\n    const updateSqlQuery = `UPDATE dummyusertable \n                            SET first_name = :firstName\n                            WHERE email = :email`\n    try {\n      console.log(updateSqlQuery)\n      const result = await connection.executeMany(updateSqlQuery, updateBinds, options)\n      \n      console.log('Result - ', result)\n      return result\n    } catch (error) {\n      console.log(error)\n      throw new Error(error)\n    } finally {\n       try {\n        if(connection) {\n          await connection.close()\n        }\n       } catch(err) {\n          console.log(err.message)\n       }\n    }\n")))}p.isMDXComponent=!0}}]);